import json
from json import JSONDecodeError

from risk_policy_distillation.llms.llm_component import LLMComponent
from risk_policy_distillation.models.components.context_generator import (
    ContextGenerator,
)


class Verifier:

    def __init__(self, llm_component: LLMComponent):
        """
        LLM-based component for verifying if a concept is supported by extracted words
        :param llm_component:
        """
        self.llm_component = llm_component

        cg = ContextGenerator()

        self.verification_context = cg.generate_verification_context()
        self.verification_prompt = """ 
                                     Text: {text}
                                     Words: {words}
                                     Bulletpoint: {bulletpoint}
                                   """

    def verify(self, bulletpoints, text, words):
        """
        Verifies and filters out bulletpoints which are not supported by the words in the text.
        :param bulletpoints: List of bulletpoint concepts
        :param text: Input text to LLM-as-a-Judge
        :param words: A list of important words generated by a local word-based explainer
        :return: A filtered list of bulletpoints where each is supported words
        """
        verified = []

        for b in bulletpoints:
            output = self.llm_component.send_request(
                self.verification_context,
                self.verification_prompt.format(text=text, words=words, bulletpoint=b),
            )

            try:
                supported = json.loads(output)["answer"]
                supported = supported == "Yes"
            except JSONDecodeError:
                supported = False

            if supported:
                verified.append(b)

        return verified
